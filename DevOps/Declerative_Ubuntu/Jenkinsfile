// All Rights Reserved JudaB(c) - 2023

def glblEnvVersion = "None"

pipeline {
    agent {
        docker { 
                image 'judab/jenkins-ubuntu-ssh-slave:230715-07.39' 
                args '--privileged'
        }
    }
    stages {
        
        stage('Build ZIP') {
            steps {
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        echo "[DEBUG]: ${glblEnvVersion}"
                        script {
                                // Accessing the environment variable from the container
                                glblEnvVersion = sh(script: 'echo $VERSION', returnStdout: true).trim()
                                // TODO: if Value is None then abort JOB

                        }
                        echo "[DEBUG]: ${glblEnvVersion}"
                        sh 'cp /tmp/zip_job.py .;ls -la'
                        //
                        // You have replace the line here to simulate failure of the python
                        sh 'ls -la ;touch a_1.2.0.zip;chmod 0777 a_1.2.0.zip;python3 zip_job.py;ls -la'       
                        //sh 'ls -la ;touch a_1.2.0.zip;chmod 0400 a_1.2.0.zip;python3 zip_job.py;ls -la'       
                    }
            }
        
            post {
                always { 
                    archiveArtifacts allowEmptyArchive: true, artifacts: '*.zip', followSymlinks: false, onlyIfSuccessful: true
                    script 
                    {
                        def targetPath = "judabrepo/${glblEnvVersion}/"

                        echo "[DEBUG]: TargetPath ${targetPath}"
                        echo """[DEBUG]: {"files": [{"pattern": "*.zip","target": "${targetPath}"}]}"""
                        rtUpload ( serverId: 'artifactory-oss',spec: """{"files": [{"pattern": "*.zip","target": "${targetPath}"}]}""",)
                    }
                    cleanWs()
                    sh 'ls -la'
                    }
                }            

        } // Stage            
    } // Stages
       post { 
        always { 
                script {
                    def subject = "Job Status: ${currentBuild.result}"
                    def body = "The job ${env.JOB_NAME} has completed with status: ${currentBuild.result}"
            
                    emailext (
                        recipientProviders: [developers(), requestor()], 
                        subject: subject,
                        body: body
                        )
                }
            }
        }
}
